<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="cmmGridDataFilter" width="620" height="500" titletext="그리드 데이터필터" onload="form_onload">
    <Layouts>
      <Layout height="500" mobileorientation="landscape" width="620">
        <Grid id="grd_List" taborder="0" left="14" top="54" binddataset="ds_Filter" griduserproperty="!sort,!rowfix,!colfix,!filter,!initial" autoenter="select" autofittype="col" right="14" bottom="50" oncellclick="grd_List_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="220"/>
                <Column size="365"/>
              </Columns>
              <Rows>
                <Row size="32" band="head"/>
                <Row size="28"/>
              </Rows>
              <Band id="head">
                <Cell text="컬럼명" expandchar="popup.columnname"/>
                <Cell col="1" text="필터기준" expandchar="popup.filtercriteria"/>
              </Band>
              <Band id="body">
                <Cell text="bind:title" displaytype="text" edittype="none" combodataset="dsFilterCol" combodatacol="columnName" combocodecol="columnId" textAlign="left"/>
                <Cell col="1" displaytype="combocontrol" edittype="combo" combodataset="expr:comp.parent.fn_ComboFilter(currow)" combodatacol="value" combocodecol="code" text="bind:code" combodisplaynulltype="nulltext" combodisplaynulltext="선택"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btn_FilterCancel" taborder="1" text="필터취소" left="278" width="80" height="30" uWord="popup.cancel" onclick="btn_FilterCancel_onclick" cssclass="btn_WF_Search" bottom="10"/>
        <Button id="btnUp" taborder="2" left="447" top="0" width="25" height="25" onclick="btnUp_onclick" cssclass="btn_WF_ShuttleT"/>
        <Button id="btnDown" taborder="3" top="0" width="25" height="25" onclick="btnDown_onclick" cssclass="btn_WF_ShuttleB" left="475"/>
        <Button id="btn_SetFilter" taborder="4" text="필터적용" left="192" width="80" height="30" uWord="popup.apply" onclick="btn_SetFilter_onclick" cssclass="btn_WF_Search" bottom="10"/>
        <Button id="btn_Close" taborder="5" text="닫기" left="364" width="80" height="30" uWord="popup.close" onclick="btn_Close_onclick" cssclass="btn_WF_CRUD" bottom="10"/>
        <Div id="div_PopupTitle" taborder="6" left="0" top="0" height="44" right="0" cssclass="div_WF_PopupTop">
          <Layouts>
            <Layout>
              <Static id="sta_PopupTitle" taborder="1" text="그리드 데이터 필터" left="20" top="10" height="24" cssclass="sta_WF_PopupTitle" width="300"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_FilterType">
        <ColumnInfo>
          <Column id="code" type="STRING" size="256"/>
          <Column id="name" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="name">선택</Col>
          </Row>
          <Row>
            <Col id="code">=</Col>
            <Col id="name">같은 ( = )</Col>
          </Row>
          <Row>
            <Col id="code">&gt;</Col>
            <Col id="name">보다 큰 ( &gt; )</Col>
          </Row>
          <Row>
            <Col id="code">&lt;</Col>
            <Col id="name">보다 작은 ( &lt; )</Col>
          </Row>
          <Row>
            <Col id="code">!=</Col>
            <Col id="name">같지않는 ( != )</Col>
          </Row>
          <Row>
            <Col id="code">like</Col>
            <Col id="name">포함하는 ( like )</Col>
          </Row>
          <Row>
            <Col id="code">nolike</Col>
            <Col id="name">포함하지 않는 ( Not like )</Col>
          </Row>
        </Rows>
      </Dataset>
      <Dataset id="ds_Filter" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="title" type="STRING" size="256"/>
          <Column id="filtertype" type="STRING" size="256"/>
          <Column id="columid" type="STRING" size="256"/>
          <Column id="filtervalue" type="STRING" size="256"/>
          <Column id="displaytype" type="STRING" size="256"/>
          <Column id="combocodecol" type="STRING" size="256"/>
          <Column id="combodatacol" type="STRING" size="256"/>
          <Column id="combodataset" type="STRING" size="256"/>
          <Column id="col" type="INT" size="256"/>
          <Column id="code" type="STRING" size="256"/>
          <Column id="colId" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_Temp" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="title" type="STRING" size="256"/>
          <Column id="col" type="INT" size="256"/>
          <Column id="body" type="STRING" size="256"/>
          <Column id="filtertype" type="STRING" size="256"/>
          <Column id="displaytype" type="STRING" size="256"/>
          <Column id="edittype" type="STRING" size="256"/>
          <Column id="combodatacol" type="STRING" size="256"/>
          <Column id="combocodecol" type="STRING" size="256"/>
          <Column id="combodataset" type="STRING" size="256"/>
          <Column id="filtervalue" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="ds_TempMaster"/>
      <Dataset id="ds_Code">
        <ColumnInfo>
          <Column id="code" type="STRING" size="256"/>
          <Column id="value" type="STRING" size="256"/>
          <Column id="columid" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
*  컨설팅 표준화 작업
*  @MenuPath        cmm > cmmGridFilter
*  @FileName 		cmmGridFilter.xfdl 
*  @Creator 		consulting
*  @CreateDate 		2017.10.31
*  @Desction        그리드 필터를 수행할 공통팝업
************** 소스 수정 이력 ***************************************************
*  date          		Modifier                Description
*******************************************************************************
*  2017.10.31     	consulting 	                최초 생성 
*******************************************************************************
*/

/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
this.fvTargetGrid; 	  //대상그리드 OBJECT
this.fvTargetDataset; //대상데이터셋 OBJECT

/***********************************************************************************************
* FORM EVENT 영역(onload)
/***********************************************************************************************/
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfn_FormOnLoad(this);
	
// 	var sTitle = this.getOwnerFrame().paramTitle;
// 	this.set_titletext(sTitle);
	
	this.fvTargetGrid = this.getOwnerFrame().pvGrid;
	this.fvTargetDataset = this.fvTargetGrid.getBindDataset();
	
	var bUserHeader = this._gfnGridUserHeaderFlg(this.fvTargetGrid);
	this.fn_GetHeadText(this.fvTargetGrid);
	/*
	if( !bUserHeader) {
		this.fn_GetHeadText(this.fvTargetGrid);
	}else{
		this.fn_GetUserHeader(this.fvTargetGrid);
	}
	*/
};

/************************************************************************************************
* TRANSACTION 서비스 호출 처리
************************************************************************************************/

/************************************************************************************************
 * CALLBACK 콜백 처리부분
 ************************************************************************************************/
 
 /************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/**
 * @description 그리드의 헤드정보를 받아와 콤보 세팅(userHeader prop 사용)
*/
this.fn_GetUserHeader = function (objGrid)
{
	var nheadcnt = objGrid.getCellCount("head");

	for( var i=0; i<nheadcnt; i++){
		var bindcol = objGrid.getCellProperty("head", i, "calendarweekformat");
		if( this.gfn_IsNull(bindcol)) continue;
		
		for( var j=0; j<objGrid.getCellCount("body"); j++)
		{
			var nCell =0;
			if( bindcol == objGrid.getCellProperty("body", j,"text")){
				nCell = j;
				var columname = objGrid.getCellProperty("body", nCell, "text");
				var nRow = this.ds_Temp.addRow();
				var displaytype = objGrid.getCellProperty("body", nCell, "displaytype");
				
				if( displaytype == "combotext" || displaytype == "combocontrol"){
					displaytype = "combo";
					columname = objGrid.getCellProperty("body", nCell, "text").substring(5);
					this.fvTargetDataset.set_enableevent(false);
					this.fvTargetDataset.set_updatecontrol(false);
					this.fvTargetDataset.addColumn(columname+"_text");                    
					for(var n=0; n<this.fvTargetDataset.getRowCount(); n++)
					{
						this.fvTargetDataset.setColumn(n, columname+"_text", this.fvTargetGrid.getCellText(n, j));
					}
					this.fvTargetDataset.set_enableevent(true);
					this.fvTargetDataset.set_updatecontrol(true);
					trace("columname :: " + columname);
					this.ds_Temp.setColumn(nRow, "body", "bind:"+columname+"_text"); 
				}else{
					this.ds_Temp.setColumn(nRow, "body", columname); 
				}
				this.ds_Temp.setColumn(nRow, "col", j);
				this.ds_Temp.setColumn(nRow, "displaytype",  displaytype);
				this.ds_Temp.setColumn(nRow, "combocodecol", objGrid.getCellProperty("body", j, "combocodecol"));
				this.ds_Temp.setColumn(nRow, "combodatacol", objGrid.getCellProperty("body", j, "combodatacol"));
				this.ds_Temp.setColumn(nRow, "combodataset", objGrid.getCellProperty("body", j, "combodataset"));
				this.ds_Temp.setColumn(nRow, "title", objGrid.getCellProperty("head", i, "text"));
			}
		}
	}

	this.fn_FilterSetup();
};

/**
 * @description 그리드의 헤드정보를 받아와 콤보 세팅(defualt)
*/
this.fn_GetHeadText = function (objGrid)
{	
	// 바디의 갯수만큼 디스플레이정보 및 콤보의 정보를 설정한다.     
    for(var i=0;i<objGrid.getCellCount("Body");i++)
    {
        if( objGrid.getCellProperty("Body", i, "displaytype") != "image" )
        {
			var sText = objGrid.getCellProperty("Body", i, "text");	
			if( sText == "bind:gridcmmcheck") continue; //공통체크박스 제외
			var sBind;
			if ( this.gfn_IsNull(sText) == false ){
				sBind = sText.substr(0, 5);
			}else {
				sBind = "";
			}
			
			if (sBind == "bind:")
			{
				var nrow = this.ds_Temp.addRow();
				
				var displaytype = "text";
				if( objGrid.getCellProperty("Body", i, "displaytype") == "combotext" ||objGrid.getCellProperty("Body", i, "displaytype") == "combocontrol")
				{
					displaytype = "combo";
					
					// 콤보의 경우는 TEXT로 필터링이 되질않기 때문에 해당 _text 를 동적으로 생성해서 그 값을 이용하도록 한다. 
					var columname = objGrid.getCellProperty("Body", i, "text").substring(5);                
					if( this.gfn_IsNull(this.fvTargetDataset.getColumnInfo(columname+"_text")) )
					{
						this.fvTargetDataset.set_enableevent(false);
						this.fvTargetDataset.set_updatecontrol(false);
						this.fvTargetDataset.addColumn(columname+"_text");                    
						for(var j=0;j<this.fvTargetDataset.getRowCount();j++)
						{
							this.fvTargetDataset.setColumn(j, columname+"_text", this.fvTargetGrid.getCellText(j, i));
						}
						this.fvTargetDataset.set_enableevent(true);
						this.fvTargetDataset.set_updatecontrol(true);
					}
					
					this.ds_Temp.setColumn(nrow, "body", "bind:"+columname+"_text");            
				}
				else
				{
					this.ds_Temp.setColumn(nrow, "body", objGrid.getCellProperty("Body", i, "text"));            
				}
				
				this.ds_Temp.setColumn(nrow, "col", i);
				this.ds_Temp.setColumn(nrow, "displaytype",  displaytype);
				this.ds_Temp.setColumn(nrow, "combocodecol", objGrid.getCellProperty("Body", i, "combocodecol"));
				this.ds_Temp.setColumn(nrow, "combodatacol", objGrid.getCellProperty("Body", i, "combodatacol"));
				this.ds_Temp.setColumn(nrow, "combodataset", objGrid.getCellProperty("Body", i, "combodataset"));
			}
        }
    }
	

	// 바디에 매칭되는 헤더의 타이틀을 설정한다. 
	var sChkCol = "";
    for(var i=0; i<this.ds_Temp.getRowCount();i++)	
    {
		sChkCol = this.ds_Temp.getColumn(i, "col");

        //var title  = objGrid.getCellProperty("Head", nexacro.toNumber(sChkCol),   "text");
		var title  = this.fn_getHeadText(objGrid, nexacro.toNumber(sChkCol));
        var body   = this.ds_Temp.getColumn(i, "body");

        //  콤보일때는 _text 로 처리한다. 
        var display = objGrid.getCellProperty("Body", nexacro.toNumber(sChkCol), "displaytype");        
        if( display == "combotext" || display=="combocontrol")
        {
			if (!this.gfn_IsNull(body)) {
				//body = "bind:"+body.substring(5)+"_text";
				body = "bind:"+body.substring(5);
			}
        }
            
        var nrow = this.ds_Temp.findRow("body", body);     

        if( nrow != -1 )
        {
            this.ds_Temp.setColumn(nrow, "title", title);
        }
    }

	this.fn_FilterSetup();
	
	
	
};

this.fn_getHeadText = function(obj, nCell)
{
	var cnt=0;
	for(j=nCell; j>=0; j--) {
		var aa = obj.getCellProperty("Body", j, "col");
		var icell = obj.getCellCount("Head");
	
		for(i=icell; i>=0; i--) {
	
			if(obj.getCellProperty("Head", i, "row")==0 && aa == obj.getCellProperty("Head", i, "col")) {
				var bb = obj.getCellProperty("Head", i, "text");
				return bb;
			} else if(obj.getCellProperty("Head", i, "row")==1 && aa == obj.getCellProperty("Head", i, "col")) {

				var cc = obj.getCellProperty("Head", i, "text");
				return cc;
			}
		}
	}
}


this.fn_FilterSetup = function ()
{ 
	var filterlist= new Array();
    var filterstr = this.fvTargetDataset.filterstr;
    var tempbuff  = filterstr.split("&&");
    for(var i=0;i<tempbuff.length;i++)
    {
        var columinfo = tempbuff[i].trim();
        var columname   = "";
        var condition   = "";
        var filtertype  = "";
        var filtervalue = columinfo.split("'")[1];
        
        for(var j=0;j<columinfo.length;j++)
        {
            if( "1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".indexOf(columinfo.charAt(j)) == -1 )
            {
                columname = columinfo.substring(0, j);
                condition = columinfo.substring(j);
                break;
            }
        }

        // 포함여부 
        if( condition.indexOf("indexOf") != -1 )
        {
			// ITO : 필터 선택 콤보 오류
            if( condition.indexOf("==") != -1 )
            {
                filtertype = "nolike";
            }
            else
            {
                filtertype = "like";
            }
        }
        else
        {
            if( condition.indexOf("==") != -1 )
            {
                filtertype = "=";
            }
            else if( condition.indexOf("!=") != -1 )
            {
                filtertype = "!=";
            }
            else if( condition.indexOf(">") != -1 )
            {
                filtertype = ">";
            }
            else if( condition.indexOf("<") != -1 )
            {
                filtertype = "<";
            }
        }
        
        filterlist.push({body:"bind:"+columname, filtertype:filtertype, filtervalue:filtervalue});
    }

	// 이전의 필터조건을 이용해서 설정하고 소팅처리한다. 
    for(var i=0;i<filterlist.length;i++)
    {
        var nrow = this.ds_Temp.findRow("body", filterlist[i].body);
        this.ds_Temp.setColumn(nrow, "col",       -(filterlist.length-i)     );
        this.ds_Temp.setColumn(nrow, "filtertype",  filterlist[i].filtertype );
        this.ds_Temp.setColumn(nrow, "filtervalue", filterlist[i].filtervalue);
    }
    
    this.ds_Temp.set_keystring("S:col");  
	var body = "";
    for(var i=0;i<this.ds_Temp.getRowCount();i++)
    {
        body = this.ds_Temp.getColumn(i, "body").substring(5);

        var sTitle = this.ds_Temp.getColumn(i, "title");        
		if ( this.gfn_IsNull(sTitle) == false )
	    {	    
			var nRow = this.ds_Filter.addRow();    
			this.ds_Filter.setColumn(nRow, "title",       sTitle);
			this.ds_Filter.setColumn(nRow, "filtertype",  this.ds_Temp.getColumn(i, "filtertype"));
			this.ds_Filter.setColumn(nRow, "filtervalue", this.ds_Temp.getColumn(i, "filtervalue"));
			this.ds_Filter.setColumn(nRow, "columid",     nexacro.replaceAll(body,"_text", ""));       
			//this.ds_Filter.setColumn(nRow, "colId",     nexacro.replaceAll(body,"_text", ""));		
			this.ds_Filter.setColumn(nRow, "colId",     body);				
			this.ds_Filter.setColumn(nRow, "displaytype", this.ds_Temp.getColumn(i, "displaytype"));
			this.ds_Filter.setColumn(nRow, "combocodecol",this.ds_Temp.getColumn(i, "combocodecol"));
			this.ds_Filter.setColumn(nRow, "combodatacol",this.ds_Temp.getColumn(i, "combodatacol"));
			this.ds_Filter.setColumn(nRow, "combodataset",this.ds_Temp.getColumn(i, "combodataset"));
        }
    }
	if( this.ds_Filter.rowcount > 0 ) this.ds_Filter.set_rowposition(0);

	this.ds_TempMaster.clear();
	this.ds_TempMaster.copyData(this.fvTargetDataset);
		
	var sExpr = "rowidx==dataset.findRowExpr(\"data=='\" + data + \"'\")";
	var sColId = "";
	this.ds_Code.clearData();

	if (this.ds_Filter.getRowCount() > 0) {
		for (var iLoop=0; iLoop<this.ds_Filter.getRowCount(); iLoop++) {
		
			var dsObj = new Dataset;
			dsObj.set_name("ds_FilterSub" + iLoop);//데이터셋명 설정
			this.addChild(dsObj.name, dsObj);//해당 화면에 데이터셋 등록
			dsObj.addColumn("code", "string");
			dsObj.addColumn("value", "string");

			//데이터 복사
			sColId = this.ds_Filter.getColumn(iLoop, "colId");
			this.ds_TempMaster.filter("");
			sExpr = "rowidx==dataset.findRowExpr(\"" + sColId + "=='\" + " + sColId + " + \"'\")";

			this.ds_TempMaster.filter(sExpr);
			var iAddRow = 0;

			if (this.ds_TempMaster.getRowCount() > 0) {
				for (var jLoop=0; jLoop < this.ds_TempMaster.getRowCount(); jLoop++) {
					/*
					var iAddRow = this.ds_Code.addRow();
					this.ds_Code.setColumn(iAddRow, "code", this.ds_TempMaster.getColumn(jLoop, sColId));
					this.ds_Code.setColumn(iAddRow, "value", this.ds_TempMaster.getColumn(jLoop, sColId));
					this.ds_Code.setColumn(iAddRow, "columid", sColId);
					*/
					
					if (jLoop == 0) {
						iAddRow = dsObj.addRow();
						dsObj.setColumn(iAddRow, "code", "");
						dsObj.setColumn(iAddRow, "value", "선택");
						dsObj.setColumn(iAddRow, "columid", sColId);		
					}
					iAddRow = dsObj.addRow();
					dsObj.setColumn(iAddRow, "code", this.ds_TempMaster.getColumn(jLoop, sColId));
					dsObj.setColumn(iAddRow, "value", this.ds_TempMaster.getColumn(jLoop, sColId));
					dsObj.setColumn(iAddRow, "columid", sColId);					
				}
			}
		}
	}

};

this.fn_ComboFilter = function(sRow)
{
	//this.ds_Code.filter("columid == '" + sCol + "'");
	return "ds_FilterSub" + sRow;
}

/************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 ************************************************************************************************/

/**
 * @description 업 버튼클릭이벤트
*/
this.btnUp_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var currow = this.ds_Filter.rowposition;
    
    if( currow == 0 ) return;
    
    this.ds_Filter.moveRow(currow, --currow);
};

/**
 * @description 다운 버튼클릭이벤트
*/
this.btnDown_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var currow = this.ds_Filter.rowposition;
    
    if( currow == this.ds_Filter.getRowCount()-1 ) return;
	
    this.ds_Filter.moveRow(currow, ++currow);
};

/**
 * @description 필터적용 버튼클릭이벤트
*/
this.btn_SetFilter_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var dataset = this.fvTargetDataset;
    var filterstr = "";
    
    for(var i=0;i<this.ds_Filter.getRowCount();i++)
    {
        //var columid    = this.ds_Filter.getColumn(i, "columid");
		var columid    = this.ds_Filter.getColumn(i, "colId");
		
        var filtervalue= this.ds_Filter.getColumn(i, "code");

        if(!this.gfn_IsNull(filtervalue) )
        {
            var tempfilter = "";
            
            tempfilter = columid+"=='"+filtervalue+"'";

            
            if( this.gfn_IsNull(filterstr) )
                filterstr = tempfilter;
            else
                filterstr += " && "+tempfilter;
        }
    }
    trace(filterstr);
    dataset.set_filterstr(filterstr);	
};


/**
 * @description 필터취소 버튼클릭이벤트
*/
this.btn_FilterCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
		this.fvTargetDataset.set_filterstr("");
};

/**
 * @description 닫기 버튼클릭이벤트
*/
this.btn_Close_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.gfn_PopClose();
};

this.grd_List_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	//그리드 콤보 및 캘린더 클릭시 펼치기
	obj.dropdownCombo();	
};
]]></Script>
  </Form>
</FDL>
