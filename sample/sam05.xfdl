<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="sam05" width="1680" height="790" titletext="New Form" onload="sam05_onload">
    <Layouts>
      <Layout height="790" mobileorientation="landscape" width="1680">
        <Static id="Static00" taborder="0" text="Height : 15px" left="10" top="0" height="15" background="pink" right="10" visible="false" textAlign="center"/>
        <Static id="Static00_00" taborder="1" text="Width : 10px" left="0" top="0" background="pink" visible="false" width="10" bottom="10"/>
        <Div id="div_SchCont" taborder="2" left="10" top="15" height="46" right="10" border="1px solid #93acd4" background="#fbfcfe">
          <Layouts>
            <Layout>
              <Button id="btn_Search" taborder="0" text="조회" top="7" height="30" background="#032c6c" color="white" width="70" right="15" onclick="dis_SchCont_btn_Search_onclick"/>
              <Edit id="edt_MultiCombo" taborder="1" left="63" top="9" width="211" height="26" readonly="true"/>
              <Button id="btn_MultiCombo" taborder="2" text="ㅇ" left="277" top="9" width="36" height="26"/>
              <Button id="Button00" taborder="3" text="값읽기" left="585" top="8" width="71" height="29" onclick="div_SchCont_Button00_onclick"/>
            </Layout>
          </Layouts>
        </Div>
        <Button id="Button00" taborder="3" text="값세팅" left="376" top="18" width="92" height="46" onclick="Button00_onclick"/>
        <Button id="Button01" taborder="4" text="코드읽기" left="490" top="23" width="88" height="34" onclick="Button01_onclick"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[this.sam05_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	//체크 콤보 설정값 만들기
	var objConfig = {
						dropbutton	 : this.div_SchCont.form.btn_MultiCombo,
						innerdataset : this.ds_MultiCombo,
						codecolumn	 : "commCd",
						datacolumn	 : "commCdNm",
						displayRowCount : 10
				    };
				
	//체크 콤보 초기화 함수 호출
	this.gfn_InitMultiCombo(this.div_SchCont.form.edt_MultiCombo, objConfig);	
};

/**
* @description 	     : 체크 콤보 초기화 함수
* @param objEdit     : 체크 콤보 설정 할 Edit 컴포넌트
* @param objConfig   : 체크 콤보 설정 값
* @return            : 없음
*/
this.gfn_InitMultiCombo = function(objEdit, objConfig)
{
	//체크 콤보 드롭다운 리스트 만들기 함수 호출
	var objComboList = this.gfn_CreateComboList(objEdit, objConfig);
	
	//드롭다운 버튼 가져오기
	var objDropButton = objConfig.dropbutton;
	
	//드롭다운 버튼 동작시 실행될 Edit 컴포넌트를 사용자 변수에 설정
	objDropButton.targetedit = objEdit;
	
	//콤보리스트 동작시 실행될 Edit 컴포넌트를 사용자 변수에 설정
	objComboList.targetedit = objEdit;
	
	//설정값에 생성된 콤보리스트를 추가
	objConfig.combolist = objComboList;
	
	//드롭다운 버튼 클릭 이벤트 생성
	objDropButton.addEventHandler("onclick", this.gfn_MultiComboDropButton_onclick, this);
	
	//Edit 컴포넌트에 설정값 저장
	objEdit.config = objConfig;
}

/**
* @description 	     : 체크 콤보 그리드 생성 함수
* @param objEdit     : 체크 콤보로 설정할 Eidt 컴포넌트
* @param objConfig   : 체크 콤보 설정 값
* @return            : 없음
*/
this.gfn_CreateComboList = function(objEdit, objConfig)
{
	var rtn;
	var objComboList;
	var objGrid;
	var sGridFormat = "";
	var sCheckColumn = "chk";
	var sCodecolumn = objConfig.codecolumn;
	var sDataColumn = objConfig.datacolumn;
	var objInnerDataset = objConfig.innerdataset;
	var sComboListId = objEdit.id+"_combolist";
	
	//기존에 생성된 리스트가 있을 경우 가져오기
	if(this.gfn_IsNull(this.components[sComboListId])==false) {
		//기존에 생성된 드롭다운리스트를 리턴값으로 설정
		rtn = this.components[sComboListId];
	//기존에 생성된 리스트가 없을 경우 만들기
	} else {
		//드롭다운 리스트용 PopupDiv 생성
		objComboList = new PopupDiv(sComboListId, 0, 0, 0, 0);
		this.addChild(objComboList.name, objComboList); 
		objComboList.show();
		
		//리스트용 Grid 생성
		objGrid = new Grid("grd_MultiCombo", 0, 0, null, null, 0, 0);
		objComboList.addChild(objGrid.name, objGrid); 
		
		//그리드에 표현될 Format 정보 생성
		sGridFormat += '<Formats>';
		sGridFormat += '  <Format id="default">';
		sGridFormat += '	<Columns>';
		sGridFormat += '	  <Column size="30" band="left"/>';
		sGridFormat += '	  <Column size="50"/>';		
		sGridFormat += '	  <Column size="100"/>';
		sGridFormat += '	</Columns>';
		sGridFormat += '	<Rows>';
		sGridFormat += '	  <Row size="24"/>';
		sGridFormat += '	</Rows>';
		sGridFormat += '	<Band id="body">';
		sGridFormat += '	  <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:'+sCheckColumn+'"/>';
		sGridFormat += '	  <Cell col="1" text="bind:'+sCodecolumn+'"/>';		
		sGridFormat += '	  <Cell col="2" text="bind:'+sDataColumn+'"/>';
		sGridFormat += '	</Band>';
		sGridFormat += '  </Format>';
		sGridFormat += '</Formats>';
		
		//그리드 Format 설정
		objGrid.set_formats(sGridFormat);
		
		//그리드 Dataset 바인딩
		objGrid.set_binddataset(objInnerDataset);
		
		//그리드 AutoFit 설정
		objGrid.set_autofittype("col");
		objGrid.setCellProperty("body", 2, "textAlign", "left");
		
		objGrid.show();
		
		//그리드 셀 클릭 이벤트 생성
		objGrid.addEventHandler("oncellclick", this.gfn_MultiComboGrid_oncellclick, this);
		
		//생성된 드롭다운리스트를 리턴값으로 설정
		rtn = objComboList;
	}
	
	//드롭다운 리스트 리턴
	return objComboList;
	
};

/**
* @description 	   : 체크콤보 Dropdown버튼 onclick 이벤트
*/
this.gfn_MultiComboDropButton_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{ 
	var objTargetEdit = obj.targetedit;
	//드롭다운 리스트 호출 함수 실행
	this.gfn_ShowDropComboList(objTargetEdit);
};

/** 
* @description 	 : 드롭다운 리스트 호출 함수
* @param obj     : 체크 콤보로 설정할 Eidt 컴포넌트
* @return        : 없음
*/
this.gfn_ShowDropComboList = function(obj)
{
	var nLeft;
	var nTop;
	var nWidth;
	var nHeight;
	var objConfig = obj.config;
	var objDs = objConfig.innerdataset;
	var objDropButton = objConfig.dropbutton;
	var objTargetComboList = objConfig.combolist;
	var nCount = objDs.rowcount;
	var sDisplayRowCount=objConfig.displayRowCount;//리스트에 표현될 아이템의 최대 갯수 설정

	
	//리스트의 아이템 높이 설정
	var sItemHeight = 24;
	
	//데이터의 갯수가 displayrowcount보다 작을 경우
	//데이터의 갯수를 displayrowcount로 설정
	if(sDisplayRowCount>nCount) {
		sDisplayRowCount = nCount;
	}
	
	//표현될 드롭다운리스트의 사이즈 계산
	nLeft = 0;
	nTop = objDropButton.getOffsetHeight();
	nWidth = obj.getOffsetWidth() + objDropButton.getOffsetWidth();
	nHeight = sDisplayRowCount*sItemHeight+3;
	
	//드롭다운리스트 호출
	objTargetComboList.trackPopupByComponent(obj, nLeft, nTop, nWidth, nHeight);
};

/**
* @description 	 : 체크 콤보의 변경사항을 계산하여 값에 반영하는 함수
* @param obj     : 체크 콤보로 설정할 Eidt 컴포넌트
* @return        : 없음
*/
this.gfn_ChangeDataChkCombo = function(obj)
{
	var i;
	
	//설정정보 가져오기
	var objConfig = obj.config;
	
	//InnerDataset 가져오기
	var objDs = objConfig.innerdataset;
	
	//코드 컬럼 정보 가져오기
	var sCodeColumn = objConfig.codecolumn;
	
	//값 컬럼 정보 가져오기
	var sDataColumn = objConfig.datacolumn;
	
	//체크 컬럼 정보 가져오기
	var sCheckColumn = "chk";
	
	//체크콤보 데이터 갯수 가져오기
	var nCount = objDs.rowcount;
	
	var bCheck;
	var arrCode = [];
	var arrData = [];
	
	//체크된 Row에서 Code, Value 컬럼 값 리스트로 만들기
	for(i=0;i<nCount;i++)
	{
		bCheck = objDs.getColumn(i, sCheckColumn);
		
		if(bCheck==1)
		{
			arrCode[arrCode.length] = objDs.getColumn(i, sCodeColumn);
			arrData[arrData.length] = objDs.getColumn(i, sDataColumn);
		}
	}
	
	//이전 값 가져오기
	var sPreData = obj.value;
	var sPreCode = obj.code;
	
	//현재 값 가져오기
	var sPostData = arrData.toString();
	var sPostCode = arrCode.toString();
	
	//현재 값 value 속성에 설정
	obj.set_value(sPostData);
	
	//현재 코드 code 사용자 변수에 설정
	obj.code = sPostCode;
	
	//값 변경에 대한 Event 호출
	//Edit의 onchanged 이벤트 발생됨
	obj._on_value_change(sPreCode, sPreData, sPostCode, sPostData);
};

/**
* @description 	 : 체크 콤보의 Code 값을 입력하는 함수
* @param obj     : 체크 콤보로 설정할 Eidt 컴포넌트
* @param sCode   : 입력할 Code 값
* @return        : 없음
*/
this.gfn_SetMultiComboCode = function(objEdit, sCode)
{
	var i;
	var nRow;
	var objConfig = objEdit.config;
	
	if(this.gfn_IsNull(objConfig)==true)return;
	
	var objDs = objConfig.innerdataset;
	var nRowCount = objDs.rowcount;
	var sCodeColumn = objConfig.codecolumn;
	var sDataColumn = objConfig.datacolumn;
	var sCheckColumn = "chk";
	var arrCode = sCode.split(",");
	var nCount = arrCode.length;
	
	objDs.set_enableevent(false);
	
	//콤보 리스트 데이터 체크 해제
	for(i=0;i<nRowCount;i++)
	{
		objDs.setColumn(i, sCheckColumn, 0);
	}
	
	//입력된 Code 값에 해당하는 데이터 체크
	for(i=0;i<nCount;i++)
	{
		nRow = objDs.findRow(sCodeColumn, arrCode[i]);
		if(nRow>-1)
		{
			objDs.setColumn(nRow, sCheckColumn, 1);
		}
	}
	
	objDs.set_enableevent(true);
	
	//체크 콤보의 변경사항을 계산하여 값에 반영하는 함수 실행
	this.gfn_ChangeDataChkCombo(objEdit);
}

/**
* @description 	 : 체크 콤보의 Data 값을 입력하는 함수
* @param obj     : 체크 콤보로 설정할 Eidt 컴포넌트
* @param sCode   : 입력할 Data 값
* @return        : 없음
*/
this.gfn_SetChkComboData = function(objEdit, sData)
{
	var i;
	var nRow;
	var objConfig = objEdit.config;
	
	if(this.gfn_IsNull(objConfig)==true)return;
	
	var objDs = objConfig.innerdataset;
	var nRowCount = objDs.rowcount;
	var sCodeColumn = objConfig.codecolumn;
	var sDataColumn = objConfig.datacolumn;
	var sCheckColumn = "chk";
	var arrData = sData.split(",");
	var nCount = arrData.length;
	
	objDs.set_enableevent(false);
	
	//콤보 리스트 데이터 체크 해제
	for(i=0;i<nRowCount;i++)
	{
		objDs.setColumn(i, sCheckColumn, 0);
	}
	
	//입력된 Data 값에 해당하는 데이터 체크
	for(i=0;i<nCount;i++)
	{
		nRow = objDs.findRow(sDataColumn, arrData[i]);
		if(nRow>-1)
		{
			objDs.setColumn(nRow, sCheckColumn, 1);
		}
	}
	
	objDs.set_enableevent(true);
	
	//체크 콤보의 변경사항을 계산하여 값에 반영하는 함수 실행
	this.gfn_ChangeDataChkCombo(objEdit);
}

/**
* @description 	   : 체크콤보 Dropdown List Grid oncellclick 이벤트
*/
this.gfn_MultiComboGrid_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	var objTargetEdit = obj.parent.parent.targetedit;

	if(e.col==0)
	{

		if(e.row==0 && obj.getCellText( e.row, 2 ) == "전체") {
			var objBindDs = obj.getBindDataset();
			var sChk = obj.getCellText( e.row, 0 );

			for (var iLoop=1; iLoop <objBindDs.getRowCount(); iLoop++) {
				objBindDs.setColumn(iLoop, "chk", sChk);
			}
		}

		//체크 콤보의 변경사항을 계산하여 값에 반영하는 함수 실행
		this.gfn_ChangeDataChkCombo(objTargetEdit);
	}
};
this.Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
		//체크 콤보의 Code 값을 입력하는 함수 실행
	//this.gfn_SetMultiComboCode(this.div_SchCont.form.edt_MultiCombo, "2,3");
	this.gfn_SetMultiComboCode(this.div_SchCont.form.edt_MultiCombo, "");
};

this.Button01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	alert(this.div_SchCont.form.edt_MultiCombo.code);
};

this.div_SchCont_Button00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	alert(this.div_SchCont.form.edt_MultiCombo.value);
};
]]></Script>
    <Objects>
      <Dataset id="ds_MultiCombo">
        <ColumnInfo>
          <Column id="chk" type="STRING" size="256"/>
          <Column id="commCd" type="STRING" size="256"/>
          <Column id="commCdNm" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row>
            <Col id="commCdNm">전체</Col>
          </Row>
          <Row>
            <Col id="commCd">1</Col>
            <Col id="commCdNm">값1</Col>
          </Row>
          <Row>
            <Col id="commCd">2</Col>
            <Col id="commCdNm">값2</Col>
          </Row>
          <Row>
            <Col id="commCd">3</Col>
            <Col id="commCdNm">값3</Col>
          </Row>
          <Row>
            <Col id="commCd">4</Col>
            <Col id="commCdNm">값4</Col>
          </Row>
          <Row>
            <Col id="commCd">5</Col>
            <Col id="commCdNm">값5</Col>
          </Row>
          <Row>
            <Col id="commCd">6</Col>
            <Col id="commCdNm">값6</Col>
          </Row>
          <Row>
            <Col id="commCd">7</Col>
            <Col id="commCdNm">값7</Col>
          </Row>
          <Row>
            <Col id="commCd">8</Col>
            <Col id="commCdNm">값8</Col>
          </Row>
          <Row>
            <Col id="commCd">9</Col>
            <Col id="commCdNm">값9</Col>
          </Row>
          <Row>
            <Col id="commCd">10</Col>
            <Col id="commCdNm">값10</Col>
          </Row>
        </Rows>
      </Dataset>
    </Objects>
  </Form>
</FDL>
